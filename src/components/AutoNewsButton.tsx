import { useState } from 'react';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import { Progress } from '@/components/ui/progress';

const AUTO_NEWS_URL = 'https://functions.poehali.dev/110a45c8-d0f9-42fd-93e3-ffc41cad489b';

interface AutoNewsButtonProps {
  onNewsCreated?: () => void;
}

const AutoNewsButton = ({ onNewsCreated }: AutoNewsButtonProps) => {
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const { toast } = useToast();

  const generateNews = async () => {
    setLoading(true);
    setProgress(0);
    
    const { dismiss } = toast({
      title: "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π",
      description: (
        <div className="space-y-2">
          <p>–°–æ–∑–¥–∞—é 28 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...</p>
          <Progress value={0} className="w-full" id="news-progress" />
          <p className="text-sm text-muted-foreground">0 –∏–∑ 28</p>
        </div>
      ),
      duration: Infinity,
    });
    
    const progressInterval = setInterval(() => {
      setProgress(prev => {
        const newProgress = Math.min(prev + (100 / 28), 95);
        const progressElement = document.querySelector('#news-progress');
        if (progressElement) {
          progressElement.setAttribute('value', String(newProgress));
        }
        const currentCount = Math.floor((newProgress / 100) * 28);
        const textElement = document.querySelector('#news-progress')?.parentElement?.querySelector('.text-sm');
        if (textElement) {
          textElement.textContent = `${currentCount} –∏–∑ 28`;
        }
        return newProgress;
      });
    }, 4500);
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 180000);
      
      const response = await fetch(AUTO_NEWS_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          count: 28
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      clearInterval(progressInterval);
      
      const data = await response.json();

      if (response.ok) {
        setProgress(100);
        dismiss();
        toast({
          title: "‚úÖ –ì–æ—Ç–æ–≤–æ!",
          description: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${data.created} –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏`,
          duration: 5000,
        });
        
        if (onNewsCreated) {
          setTimeout(onNewsCreated, 500);
        }
      } else {
        clearInterval(progressInterval);
        dismiss();
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞",
          description: data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
          variant: "destructive",
          duration: 5000,
        });
      }
    } catch (error) {
      clearInterval(progressInterval);
      dismiss();
      if (error instanceof Error && error.name === 'AbortError') {
        toast({
          title: "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
          description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          variant: "destructive",
          duration: 5000,
        });
      } else {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
          variant: "destructive",
          duration: 5000,
        });
      }
    } finally {
      setLoading(false);
      setProgress(0);
    }
  };

  return (
    <Button 
      onClick={generateNews} 
      disabled={loading}
      className="gap-2"
    >
      {loading ? (
        <>
          <Icon name="Loader2" size={16} className="animate-spin" />
          –ì–µ–Ω–µ—Ä–∏—Ä—É—é {Math.floor((progress / 100) * 28)}/28...
        </>
      ) : (
        <>
          <Icon name="Sparkles" size={16} />
          –°–æ–∑–¥–∞—Ç—å 28 –Ω–æ–≤–æ—Å—Ç–µ–π
        </>
      )}
    </Button>
  );
};

export default AutoNewsButton;
